#!/usr/bin/perl
sub generate_from_file{
  our @lines;
  ($type, $classname, $file) = @_;
  open INC, $file;
  while(<INC>)
  {
      if(m/.*\/\*AUTOGEN_(UPDATE|PASS)\*\//)
      {
        s/([ ]*)([a-zA-Z0-9_]+[ \*&]*)([a-zA-Z0-9_]+)(\([^)]*\))(.*)\/\*AUTOGEN_(UPDATE|PASS)\*\/[ ]*;(.*)/$1\n$2\n$3\n$4\n$5\n$6\n$7/;
        @list=split('\n', $_);
        ($mezery, $typ, $jmeno, $parametry, $bordel, $substituce, $ocas) = @list;
        $_ = $parametry;
        s/[^(),=]*[ ]+([a-zA-Z0-9]+)[ ]*(=[^,()]*)?([,()])/$1$3/g;
        $parametry2 = $_;
        $_=$parametry;
        s/=[^,()]*//g;
        $parametry3 = $_;
        $def = "$typ tmp = ";
        $return = " return ";
        $retvar = "tmp;";
        if($typ =~ "void")
        {
          $retvar = "";
          $return = "";
          $def="";
        }

        if($substituce =~ "UPDATE")
        {
          $b = "{ Init(); $def this->itr.$jmeno $parametry2; Update(); $return $retvar} ";
        }
        else
        {
          $b = "{ Init(); $return this->itr.$jmeno $parametry2;}";
        }

        if($type =~ "HEAD")
        {
          $classname = "";
          $b = ";";
        }
        else
        {
          $class = "${classname}::";
          $parametry = $parametry3;
        }
        
        push(@lines,"$mezery/*AUTOGENERATED*/ $typ $class$jmeno $parametry $bordel $b $ocas\n");
      }
    }
}

sub parse{
  for my $file (@ARGV)
  {
    our @lines=();
    open FILE, $file;
    print "parsing file $file\n";
    while (<FILE>)
    {
      chomp;
      if(m/.*\/\*AUTOINCLUDE_.*\*\//)
      {
        push(@lines, "$_\n");
        print "  matching $_\n";
        s/.*\/\*AUTOINCLUDE_([a-zA-Z0-9_.-]*)\*\//$1/;
        print "  processing $_\n";
        generate_from_file split('_', $_);
      }
      elsif(m/\/\*AUTOGENERATED\*\//)
      {
      }
      else
      {
        push(@lines, "$_\n");
      }

    }
    close FILE;
    open (FILE, '>', $file);
      for (@lines)
      {
        print FILE $_;
      }
      close FILE;
  }
}

parse;
